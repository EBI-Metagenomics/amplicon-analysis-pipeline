
plugins {
    id 'nf-schema@2.0.0'
    id 'nf-prov'
}

params {

    input = null
    outdir = null
    
    publish_dir_mode = 'copy'
    help = false

    // Reference databases //
    ssu_db_fasta                = ""
    ssu_db_tax                  = ""
    ssu_db_otu                  = ""
    ssu_db_mscluster            = ""
    ssu_label                   = "SILVA-SSU"

    lsu_db_fasta                = ""
    lsu_db_tax                  = ""
    lsu_db_otu                  = ""
    lsu_db_mscluster            = ""
    lsu_label                   = "SILVA-LSU"

    dada2_silva_label           = "DADA2-SILVA"
    dada2_pr2_label             = "DADA2-PR2"

    unite_db_fasta              = ""
    unite_db_tax                = ""
    unite_db_otu                = ""
    unite_db_mscluster          = ""
    unite_label                 = "UNITE"

    itsone_db_fasta             = ""
    itsone_db_tax               = ""
    itsone_db_otu               = ""
    itsone_db_mscluster         = ""
    itsone_label                = "ITSoneDB"

    pr2_db_fasta                = ""
    pr2_db_tax                  = ""
    pr2_db_otu                  = ""
    pr2_db_mscluster            = ""
    pr2_label                   = "PR2"

    rrnas_rfam_covariance_model = ""
    claninfo                    = ""

    std_primer_library  = "$projectDir/data/standard_primers"

    multiqc_config      = "$projectDir/assets/multiqc_config.yml"

    // mgnify-pipelines-toolkit version
    mpt_version         = "0.1.8--pyhdfd78af_0"

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = ''
    validationShowHiddenParams       = false
    validate_params                  = true

    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    save_trimmed_fail = true
}

prov {
    enabled = true
    formats {
        legacy {
        file = "${params.outdir}/manifest.json"
        overwrite = true
        }
    }
}

includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

profiles {
    codon_slurm {
        includeConfig 'conf/codon_slurm.config'
        includeConfig 'conf/codon_dbs.config'
    }

    local {
        includeConfig 'conf/local.config'
        includeConfig 'conf/local_dbs.config'
    }
}

manifest {
    name            = 'ebi-metagenomics/amplicon-pipeline'
    author          = """Microbiome Informatics Team - EMBL-EBI"""
    homePage        = 'https://github.com/EBI-Metagenomics/amplicon-pipeline'
    description     = """Microbiome Informatics metagenomes amplicon analysis pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0.0'
    doi             = ''
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
