
singularity {
    enabled = true
}

plugins {
    id 'nf-schema@2.0.0'
    id 'nf-prov'
}

params {

    input = null
    outdir = null
    
    publish_dir_mode = 'copy'
    help = false
    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = ''
    validationShowHiddenParams       = false
    validate_params                  = true

    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    save_trimmed_fail = true
}

prov {
    enabled = true
    formats {
        legacy {
        file = "${params.outdir}/manifest.json"
        overwrite = true
        }
    }
}

includeConfig 'conf/base.config'
includeConfig 'conf/codon_slurm.config'
includeConfig 'conf/dbs.config'
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
