/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: FASTP {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*[!_{1,2}].fastp.fastq.gz"
            ],
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.merged.fastq.gz"
            ],
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: ".json" 
            ]
        ]
    ext.args = '-l 100' // Filter out reads smaller than 100 bases

    }

    withName: SEQTK_SEQ {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.fasta.gz"
            ]
        ]
        ext.args = '-a'
    }

    withName: INFERNAL_CMSEARCH {
        ext.args = '--noali --hmmonly -Z 1000 --cut_ga -o /dev/null'
    }

    withName: "AMPLICON_PIPELINE:RRNA_EXTRACTION:CMSEARCHTBLOUTDEOVERLAP" {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/sequence-categorisation/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.deoverlapped"
            ]
        ]
    }

    withName: EXTRACTCOORDS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "sequence-categorisation/*"
            ]
        ]
    }

    withName: MAPSEQ {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/taxonomy-summary/${task.ext.db_label}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.mseq",
                saveAs: { "${meta.id}_${task.ext.db_label}.mseq" }
            ]
        ]
        ext.args = '-tophits 80 -topotus 40 -outfmt \'simple\''
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_SSU:MAPSEQ" {
        ext.db_label = "${params.ssu_label}"

    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_LSU:MAPSEQ" {
        ext.db_label = "${params.lsu_label}"
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_PR2:MAPSEQ" {
        ext.db_label = "${params.pr2_label}"
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_ITSONEDB:MAPSEQ" {
        ext.db_label = "${params.itsone_label}"
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_UNITE:MAPSEQ" {
        ext.db_label = "${params.unite_label}"
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_ASV_KRONA_SILVA:MAPSEQ" {
        ext.db_label = "${params.dada2_silva_label}"
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_ASV_KRONA_PR2:MAPSEQ" {
        ext.db_label = "${params.dada2_pr2_label}"
    }

    withName: MAPSEQ2BIOM {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/taxonomy-summary/${task.ext.db_label}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.txt",
                saveAs: { "${meta.id}_${task.ext.db_label}.txt" }
            ],
            [
                path: { "${params.outdir}/${meta.id}/taxonomy-summary/${task.ext.db_label}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.tsv",
                saveAs: { "${meta.id}_${task.ext.db_label}.tsv" }
            ]
        ]
        ext.args = '--taxid'
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_SSU:MAPSEQ2BIOM" {
        ext.db_label = params.ssu_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_LSU:MAPSEQ2BIOM" {
        ext.db_label = params.lsu_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_PR2:MAPSEQ2BIOM" {
        ext.db_label = params.pr2_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_ITSONEDB:MAPSEQ2BIOM" {
        ext.db_label = params.itsone_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_UNITE:MAPSEQ2BIOM" {
        ext.db_label = params.unite_label
    }

    withName: KRONA_KTIMPORTTEXT {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/taxonomy-summary/${task.ext.db_label}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.html"
            ]
        ]
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_SSU:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.ssu_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_LSU:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.lsu_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_PR2:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.pr2_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_ITSONEDB:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.itsone_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_OTU_KRONA_UNITE:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.unite_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_ASV_KRONA_SILVA:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.dada2_silva_label
    }

    withName: "AMPLICON_PIPELINE:MAPSEQ_ASV_KRONA_PR2:KRONA_KTIMPORTTEXT" {
        ext.db_label = params.dada2_pr2_label
    }

    withName: CLASSIFY_VAR_REGIONS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/amplified-region-inference/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.tsv"
            ],
            [
                path: { "${params.outdir}/${meta.id}/amplified-region-inference/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*S.V*.txt" 
            ]
        ]
    }

    withName: EXTRACT_VAR_REGIONS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/amplified-region-inference/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.gz"
            ]
        ]
    }

    withName: STD_PRIMER_FLAG {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*std_primers.fasta"
            ]
        ]
    }

    withName: TRIMMING_CONDUCTOR {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*trimming_conductor_out*"
            ]
        ]
    }

    withName: ASSESS_MCP_INF_POINTS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*auto_primers.fasta"
            ]
        ]
    }

    withName: FINAL_CONCAT_PRIMERS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*final_concat_primers.fasta"
            ]
        ]
    }

    withName: REV_COMP_SE_PRIMERS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*rev_comp_se_primers.fasta"
            ]
        ]
    }

    withName: CUTADAPT {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.trim.fastq.gz"
            ]
        ]
        ext.args = '-n 2'
    }

    withName: PRIMER_VALIDATION_SEARCH {
        ext.args = '-g --noali'
    }

    withName: PRIMER_VALIDATION_DEOVERLAP {
        publishDir = [
            [
                enabled: false
            ]
        ]
        ext.args = '-s'
    }

    withName: PRIMER_VALIDATION_CLASSIFY_VAR_REGIONS{
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*primer_validation.tsv"
            ]
        ]
    }

    withName: DADA2 {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/asv/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*chimeric.txt"
            ],
            [
                path: { "${params.outdir}/${meta.id}/asv/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*matched.txt"
            ]
        ]
    }

    withName: MAPSEQ2ASVTABLE {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/asv/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.tsv"
            ]
        ]
    }

    withName: MAKE_ASV_COUNT_TABLES {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/asv/${meta.var_region}/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*asv_krona_counts.txt"
            ],
            [
                path: { "${params.outdir}/${meta.id}/asv/${meta.var_region}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*asv_read_counts.tsv"
            ]
        ]
    }

    withName: EXTRACT_ASVS_LEFT {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/asv/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*asv_seqs.fasta"
            ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
