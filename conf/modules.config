/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // publishDir "${outdir}/${project}/${sampleId}/asv-gen/${var_region}", mode : "copy" 

    withName: FASTP {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*[!_{1,2}].fastp.fastq.gz"
            ],
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.merged.fastq.gz"
            ],
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: ".json" 
            ]
        ]
    ext.args = '-l 100'

    }

    withName: SEQTK_SEQ {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/qc/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.fasta.gz"
            ]
        ]
        ext.args = '-a'
    }

    // TODO: add the rest of the parameters after making the cmsearch-deoverlap fix
    withName: INFERNAL_CMSEARCH {
        ext.args = '--cut_ga'
    }

    withName: CMSEARCHTBLOUTDEOVERLAP {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/sequence-categorisation/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.deoverlapped"
            ]
        ]
    }

    withName: EXTRACT_COORDS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "sequence-categorisation/*SU.fasta"
            ]
        ]
    }

    withName: MAPSEQ2BIOM {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/taxonomy-summary/${label}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.txt"
            ]
        ]
    }

    withName: KRONA {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/taxonomy-summary/${label}" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.html"
            ]
        ]
    }

    withName: CLASSIFY_VAR_REGIONS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/amplified-region-inference/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.tsv"
            ],
            [
                path: { "${params.outdir}/${meta.id}/amplified-region-inference/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*S.V*.txt" 
            ]
        ]
    }

    withName: EXTRACT_VAR_REGIONS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/amplified-region-inference/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.gz"
            ]
        ]
    }

    withName: STD_PRIMER_FLAG {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*std_primers.fasta"
            ]
        ]
    }

    withName: TRIMMING_CONDUCTOR {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*trimming_conductor_out*"
            ]
        ]
    }

    withName: ASSESS_MCP_INF_POINTS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*auto_primers.fasta"
            ]
        ]
    }

    withName: FINAL_CONCAT_PRIMERS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*final_concat_primers.fasta"
            ]
        ]
    }

    withName: REV_COMP_SE_PRIMERS {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*rev_comp_se_primers.fasta"
            ]
        ]
    }

    withName: CUTADAPT {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.trim.fastq.gz"
            ]
        ]
        ext.args = '-n 2'
    }

    withName: PRIMER_VALIDATION_CLASSIFY_VAR_REGIONS{
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/primer-identification/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*primer_validation.tsv"
            ]
        ]
    }

    withName: DADA2 {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/asv-gen/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*.fasta"
            ],
            [
                path: { "${params.outdir}/${meta.id}/asv-gen/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*chimeric.txt"
            ],
            [
                path: { "${params.outdir}/${meta.id}/asv-gen/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*matched.txt"
            ]
        ]
    }

    withName: MAKE_ASV_COUNT_TABLES {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/asv-gen/${meta.var_region}/" },
                mode: params.publish_dir_mode,
                failOnError: true,
                pattern: "*asv_krona_counts.txt"
            ]
        ]
    }

}
